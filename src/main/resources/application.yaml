server:
  port: 8080

springdoc:
  swagger-ui:
    path: /swagger-ui.html

spring:
  application:
    name: kafkamoon-api

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/kafkamoon}
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

kafkamoon:
  kafka:
    retries: 0
    default:
      api:
        timeout:
          ms: 5000
    bootstrap:
      servers: ${KAFKA_BOOTSTRAP_SERVERS:http://localhost:9092}
  docs:
    url: http://localhost:3000
    topic-name-exceeded-limit: ${kafkamoon.docs.url}/#/reference/api?id=topic-name-exceeded-limit
    invalid-request: ${kafkamoon.docs.url}/#/reference/api?id=invalid-request
    topic-with-conflict: ${kafkamoon.docs.url}/#/reference/api?id=topic-with-conflict
    entity-not-found: ${kafkamoon.docs.url}/#/reference/api?id=entity-not-found
    kafka-communication-failure: ${kafkamoon.docs.url}/#/reference/api?id=kafka-communication-failure
management:
  endpoints:
    web:
      exposure:
          include: ["prometheus"]

bucket4j:
  enabled: true
  cache-to-use: hazelcast-spring
  filters:
    - cache-name: rate-limit
      http-response-body: '{ "type": "", "title": "Too Many Requests", "instance": "", "status": 429, "detail": "You have reached out your limit of requests, try later."}'
      url: .*
      rateLimits:
        - skip-condition: getRequestURI().contains('/get')
          expression: getRemoteAddr()
          bandwidths:
            - capacity: 10
              time: 1
              unit: minutes
              fixed-refill-interval: 30
              fixed-refill-interval-unit: seconds
